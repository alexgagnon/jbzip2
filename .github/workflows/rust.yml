name: release

on: workflow_dispatch

permissions:
  contents: write

env:
  APP_NAME: jbzip2
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: create release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          VERSION=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - run: echo "$VERSION"
      - name: create gh release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create 0.0.0 --draft --title 0.0.0
    outputs:
      version: ${{ env.VERSION }}
  
  build-and-release:
    name: build and release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # - target: x86_64-pc-windows-gnu
          #   archive: zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
          # - target: x86_64-apple-darwin
          #   archive: zip
    steps:
      - uses: actions/checkout@master

      - name: install libs
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y musl-tools

      - name: install rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: build
        run: |
          cargo build --release --target ${{ matrix.target }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/${{ env.APP_NAME }}.exe"
          else
            bin="target/${{ matrix.target }}/release/${{ env.APP_NAME }}"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=${{ env.APP_NAME }}-$version-${{ matrix.target }}" >> $GITHUB_ENV
    
      - name: creating directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"/{complete,doc}
          cp "$BIN" "$ARCHIVE" /
          cp {README.md,COPYING,UNLICENSE,LICENSE-MIT} "$ARCHIVE" /
          cp {CHANGELOG.md,FAQ.md,GUIDE.md} "$ARCHIVE"/doc/

      - name: build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV
    
      - name: build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
